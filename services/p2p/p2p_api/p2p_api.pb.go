// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.33.0
// source: services/p2p/p2p_api/p2p_api.proto

package p2p_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Peer struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Addr             string                 `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	AddrLocal        string                 `protobuf:"bytes,3,opt,name=addrLocal,proto3" json:"addrLocal,omitempty"`
	Services         string                 `protobuf:"bytes,4,opt,name=services,proto3" json:"services,omitempty"`
	LastSend         int64                  `protobuf:"varint,5,opt,name=lastSend,proto3" json:"lastSend,omitempty"`
	LastRecv         int64                  `protobuf:"varint,6,opt,name=lastRecv,proto3" json:"lastRecv,omitempty"`
	SendSize         int64                  `protobuf:"varint,7,opt,name=sendSize,proto3" json:"sendSize,omitempty"`
	RecvSize         int64                  `protobuf:"varint,8,opt,name=recvSize,proto3" json:"recvSize,omitempty"`
	SendMemory       int64                  `protobuf:"varint,9,opt,name=sendMemory,proto3" json:"sendMemory,omitempty"`
	PauseSend        bool                   `protobuf:"varint,10,opt,name=pauseSend,proto3" json:"pauseSend,omitempty"`
	UnpauseSend      bool                   `protobuf:"varint,11,opt,name=unpauseSend,proto3" json:"unpauseSend,omitempty"`
	BytesSent        uint64                 `protobuf:"varint,12,opt,name=bytesSent,proto3" json:"bytesSent,omitempty"`
	BytesReceived    uint64                 `protobuf:"varint,13,opt,name=bytesReceived,proto3" json:"bytesReceived,omitempty"`
	AvgRecvBandwidth int64                  `protobuf:"varint,14,opt,name=avgRecvBandwidth,proto3" json:"avgRecvBandwidth,omitempty"`
	AssocId          string                 `protobuf:"bytes,15,opt,name=assocId,proto3" json:"assocId,omitempty"`
	StreamPolicy     string                 `protobuf:"bytes,16,opt,name=streamPolicy,proto3" json:"streamPolicy,omitempty"`
	Inbound          bool                   `protobuf:"varint,17,opt,name=inbound,proto3" json:"inbound,omitempty"`
	ConnTime         int64                  `protobuf:"varint,18,opt,name=connTime,proto3" json:"connTime,omitempty"`
	PingTime         int64                  `protobuf:"varint,19,opt,name=pingTime,proto3" json:"pingTime,omitempty"`
	TimeOffset       int64                  `protobuf:"varint,20,opt,name=timeOffset,proto3" json:"timeOffset,omitempty"`
	Version          uint32                 `protobuf:"varint,21,opt,name=version,proto3" json:"version,omitempty"`
	SubVer           string                 `protobuf:"bytes,22,opt,name=subVer,proto3" json:"subVer,omitempty"`
	StartingHeight   int32                  `protobuf:"varint,23,opt,name=startingHeight,proto3" json:"startingHeight,omitempty"`
	CurrentHeight    int32                  `protobuf:"varint,24,opt,name=currentHeight,proto3" json:"currentHeight,omitempty"`
	Banscore         int32                  `protobuf:"varint,25,opt,name=banscore,proto3" json:"banscore,omitempty"`
	Whitelisted      bool                   `protobuf:"varint,26,opt,name=whitelisted,proto3" json:"whitelisted,omitempty"`
	FeeFilter        int64                  `protobuf:"varint,27,opt,name=feeFilter,proto3" json:"feeFilter,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Peer) Reset() {
	*x = Peer{}
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_services_p2p_p2p_api_p2p_api_proto_rawDescGZIP(), []int{0}
}

func (x *Peer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Peer) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Peer) GetAddrLocal() string {
	if x != nil {
		return x.AddrLocal
	}
	return ""
}

func (x *Peer) GetServices() string {
	if x != nil {
		return x.Services
	}
	return ""
}

func (x *Peer) GetLastSend() int64 {
	if x != nil {
		return x.LastSend
	}
	return 0
}

func (x *Peer) GetLastRecv() int64 {
	if x != nil {
		return x.LastRecv
	}
	return 0
}

func (x *Peer) GetSendSize() int64 {
	if x != nil {
		return x.SendSize
	}
	return 0
}

func (x *Peer) GetRecvSize() int64 {
	if x != nil {
		return x.RecvSize
	}
	return 0
}

func (x *Peer) GetSendMemory() int64 {
	if x != nil {
		return x.SendMemory
	}
	return 0
}

func (x *Peer) GetPauseSend() bool {
	if x != nil {
		return x.PauseSend
	}
	return false
}

func (x *Peer) GetUnpauseSend() bool {
	if x != nil {
		return x.UnpauseSend
	}
	return false
}

func (x *Peer) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *Peer) GetBytesReceived() uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *Peer) GetAvgRecvBandwidth() int64 {
	if x != nil {
		return x.AvgRecvBandwidth
	}
	return 0
}

func (x *Peer) GetAssocId() string {
	if x != nil {
		return x.AssocId
	}
	return ""
}

func (x *Peer) GetStreamPolicy() string {
	if x != nil {
		return x.StreamPolicy
	}
	return ""
}

func (x *Peer) GetInbound() bool {
	if x != nil {
		return x.Inbound
	}
	return false
}

func (x *Peer) GetConnTime() int64 {
	if x != nil {
		return x.ConnTime
	}
	return 0
}

func (x *Peer) GetPingTime() int64 {
	if x != nil {
		return x.PingTime
	}
	return 0
}

func (x *Peer) GetTimeOffset() int64 {
	if x != nil {
		return x.TimeOffset
	}
	return 0
}

func (x *Peer) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Peer) GetSubVer() string {
	if x != nil {
		return x.SubVer
	}
	return ""
}

func (x *Peer) GetStartingHeight() int32 {
	if x != nil {
		return x.StartingHeight
	}
	return 0
}

func (x *Peer) GetCurrentHeight() int32 {
	if x != nil {
		return x.CurrentHeight
	}
	return 0
}

func (x *Peer) GetBanscore() int32 {
	if x != nil {
		return x.Banscore
	}
	return 0
}

func (x *Peer) GetWhitelisted() bool {
	if x != nil {
		return x.Whitelisted
	}
	return false
}

func (x *Peer) GetFeeFilter() int64 {
	if x != nil {
		return x.FeeFilter
	}
	return 0
}

type GetPeersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Peers         []*Peer                `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPeersResponse) Reset() {
	*x = GetPeersResponse{}
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPeersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeersResponse) ProtoMessage() {}

func (x *GetPeersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeersResponse.ProtoReflect.Descriptor instead.
func (*GetPeersResponse) Descriptor() ([]byte, []int) {
	return file_services_p2p_p2p_api_p2p_api_proto_rawDescGZIP(), []int{1}
}

func (x *GetPeersResponse) GetPeers() []*Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

type BanPeerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addr          string                 `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Until         int64                  `protobuf:"varint,2,opt,name=until,proto3" json:"until,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BanPeerRequest) Reset() {
	*x = BanPeerRequest{}
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BanPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanPeerRequest) ProtoMessage() {}

func (x *BanPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanPeerRequest.ProtoReflect.Descriptor instead.
func (*BanPeerRequest) Descriptor() ([]byte, []int) {
	return file_services_p2p_p2p_api_p2p_api_proto_rawDescGZIP(), []int{2}
}

func (x *BanPeerRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *BanPeerRequest) GetUntil() int64 {
	if x != nil {
		return x.Until
	}
	return 0
}

type BanPeerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BanPeerResponse) Reset() {
	*x = BanPeerResponse{}
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BanPeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanPeerResponse) ProtoMessage() {}

func (x *BanPeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanPeerResponse.ProtoReflect.Descriptor instead.
func (*BanPeerResponse) Descriptor() ([]byte, []int) {
	return file_services_p2p_p2p_api_p2p_api_proto_rawDescGZIP(), []int{3}
}

func (x *BanPeerResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type UnbanPeerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addr          string                 `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnbanPeerRequest) Reset() {
	*x = UnbanPeerRequest{}
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnbanPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbanPeerRequest) ProtoMessage() {}

func (x *UnbanPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbanPeerRequest.ProtoReflect.Descriptor instead.
func (*UnbanPeerRequest) Descriptor() ([]byte, []int) {
	return file_services_p2p_p2p_api_p2p_api_proto_rawDescGZIP(), []int{4}
}

func (x *UnbanPeerRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type UnbanPeerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnbanPeerResponse) Reset() {
	*x = UnbanPeerResponse{}
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnbanPeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbanPeerResponse) ProtoMessage() {}

func (x *UnbanPeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbanPeerResponse.ProtoReflect.Descriptor instead.
func (*UnbanPeerResponse) Descriptor() ([]byte, []int) {
	return file_services_p2p_p2p_api_p2p_api_proto_rawDescGZIP(), []int{5}
}

func (x *UnbanPeerResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type IsBannedRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IpOrSubnet    string                 `protobuf:"bytes,1,opt,name=ipOrSubnet,proto3" json:"ipOrSubnet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsBannedRequest) Reset() {
	*x = IsBannedRequest{}
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsBannedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBannedRequest) ProtoMessage() {}

func (x *IsBannedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBannedRequest.ProtoReflect.Descriptor instead.
func (*IsBannedRequest) Descriptor() ([]byte, []int) {
	return file_services_p2p_p2p_api_p2p_api_proto_rawDescGZIP(), []int{6}
}

func (x *IsBannedRequest) GetIpOrSubnet() string {
	if x != nil {
		return x.IpOrSubnet
	}
	return ""
}

type IsBannedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsBanned      bool                   `protobuf:"varint,1,opt,name=isBanned,proto3" json:"isBanned,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsBannedResponse) Reset() {
	*x = IsBannedResponse{}
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsBannedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBannedResponse) ProtoMessage() {}

func (x *IsBannedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBannedResponse.ProtoReflect.Descriptor instead.
func (*IsBannedResponse) Descriptor() ([]byte, []int) {
	return file_services_p2p_p2p_api_p2p_api_proto_rawDescGZIP(), []int{7}
}

func (x *IsBannedResponse) GetIsBanned() bool {
	if x != nil {
		return x.IsBanned
	}
	return false
}

type ListBannedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Banned        []string               `protobuf:"bytes,1,rep,name=banned,proto3" json:"banned,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBannedResponse) Reset() {
	*x = ListBannedResponse{}
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBannedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBannedResponse) ProtoMessage() {}

func (x *ListBannedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBannedResponse.ProtoReflect.Descriptor instead.
func (*ListBannedResponse) Descriptor() ([]byte, []int) {
	return file_services_p2p_p2p_api_p2p_api_proto_rawDescGZIP(), []int{8}
}

func (x *ListBannedResponse) GetBanned() []string {
	if x != nil {
		return x.Banned
	}
	return nil
}

type ClearBannedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearBannedResponse) Reset() {
	*x = ClearBannedResponse{}
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearBannedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearBannedResponse) ProtoMessage() {}

func (x *ClearBannedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearBannedResponse.ProtoReflect.Descriptor instead.
func (*ClearBannedResponse) Descriptor() ([]byte, []int) {
	return file_services_p2p_p2p_api_p2p_api_proto_rawDescGZIP(), []int{9}
}

func (x *ClearBannedResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type AddBanScoreRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PeerId        string                 `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddBanScoreRequest) Reset() {
	*x = AddBanScoreRequest{}
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddBanScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBanScoreRequest) ProtoMessage() {}

func (x *AddBanScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBanScoreRequest.ProtoReflect.Descriptor instead.
func (*AddBanScoreRequest) Descriptor() ([]byte, []int) {
	return file_services_p2p_p2p_api_p2p_api_proto_rawDescGZIP(), []int{10}
}

func (x *AddBanScoreRequest) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *AddBanScoreRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type AddBanScoreResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddBanScoreResponse) Reset() {
	*x = AddBanScoreResponse{}
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddBanScoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBanScoreResponse) ProtoMessage() {}

func (x *AddBanScoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBanScoreResponse.ProtoReflect.Descriptor instead.
func (*AddBanScoreResponse) Descriptor() ([]byte, []int) {
	return file_services_p2p_p2p_api_p2p_api_proto_rawDescGZIP(), []int{11}
}

func (x *AddBanScoreResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type ConnectPeerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PeerAddress   string                 `protobuf:"bytes,1,opt,name=peer_address,json=peerAddress,proto3" json:"peer_address,omitempty"` // multiaddr format: /ip4/127.0.0.1/tcp/9005/p2p/12D3KooW...
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectPeerRequest) Reset() {
	*x = ConnectPeerRequest{}
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectPeerRequest) ProtoMessage() {}

func (x *ConnectPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectPeerRequest.ProtoReflect.Descriptor instead.
func (*ConnectPeerRequest) Descriptor() ([]byte, []int) {
	return file_services_p2p_p2p_api_p2p_api_proto_rawDescGZIP(), []int{12}
}

func (x *ConnectPeerRequest) GetPeerAddress() string {
	if x != nil {
		return x.PeerAddress
	}
	return ""
}

type ConnectPeerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectPeerResponse) Reset() {
	*x = ConnectPeerResponse{}
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectPeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectPeerResponse) ProtoMessage() {}

func (x *ConnectPeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectPeerResponse.ProtoReflect.Descriptor instead.
func (*ConnectPeerResponse) Descriptor() ([]byte, []int) {
	return file_services_p2p_p2p_api_p2p_api_proto_rawDescGZIP(), []int{13}
}

func (x *ConnectPeerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ConnectPeerResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DisconnectPeerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PeerId        string                 `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"` // peer ID to disconnect from
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisconnectPeerRequest) Reset() {
	*x = DisconnectPeerRequest{}
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectPeerRequest) ProtoMessage() {}

func (x *DisconnectPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectPeerRequest.ProtoReflect.Descriptor instead.
func (*DisconnectPeerRequest) Descriptor() ([]byte, []int) {
	return file_services_p2p_p2p_api_p2p_api_proto_rawDescGZIP(), []int{14}
}

func (x *DisconnectPeerRequest) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

type DisconnectPeerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisconnectPeerResponse) Reset() {
	*x = DisconnectPeerResponse{}
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectPeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectPeerResponse) ProtoMessage() {}

func (x *DisconnectPeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_p2p_p2p_api_p2p_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectPeerResponse.ProtoReflect.Descriptor instead.
func (*DisconnectPeerResponse) Descriptor() ([]byte, []int) {
	return file_services_p2p_p2p_api_p2p_api_proto_rawDescGZIP(), []int{15}
}

func (x *DisconnectPeerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DisconnectPeerResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_services_p2p_p2p_api_p2p_api_proto protoreflect.FileDescriptor

const file_services_p2p_p2p_api_p2p_api_proto_rawDesc = "" +
	"\n" +
	"\"services/p2p/p2p_api/p2p_api.proto\x12\ap2p_api\x1a\x1bgoogle/protobuf/empty.proto\"\xb0\x06\n" +
	"\x04Peer\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04addr\x18\x02 \x01(\tR\x04addr\x12\x1c\n" +
	"\taddrLocal\x18\x03 \x01(\tR\taddrLocal\x12\x1a\n" +
	"\bservices\x18\x04 \x01(\tR\bservices\x12\x1a\n" +
	"\blastSend\x18\x05 \x01(\x03R\blastSend\x12\x1a\n" +
	"\blastRecv\x18\x06 \x01(\x03R\blastRecv\x12\x1a\n" +
	"\bsendSize\x18\a \x01(\x03R\bsendSize\x12\x1a\n" +
	"\brecvSize\x18\b \x01(\x03R\brecvSize\x12\x1e\n" +
	"\n" +
	"sendMemory\x18\t \x01(\x03R\n" +
	"sendMemory\x12\x1c\n" +
	"\tpauseSend\x18\n" +
	" \x01(\bR\tpauseSend\x12 \n" +
	"\vunpauseSend\x18\v \x01(\bR\vunpauseSend\x12\x1c\n" +
	"\tbytesSent\x18\f \x01(\x04R\tbytesSent\x12$\n" +
	"\rbytesReceived\x18\r \x01(\x04R\rbytesReceived\x12*\n" +
	"\x10avgRecvBandwidth\x18\x0e \x01(\x03R\x10avgRecvBandwidth\x12\x18\n" +
	"\aassocId\x18\x0f \x01(\tR\aassocId\x12\"\n" +
	"\fstreamPolicy\x18\x10 \x01(\tR\fstreamPolicy\x12\x18\n" +
	"\ainbound\x18\x11 \x01(\bR\ainbound\x12\x1a\n" +
	"\bconnTime\x18\x12 \x01(\x03R\bconnTime\x12\x1a\n" +
	"\bpingTime\x18\x13 \x01(\x03R\bpingTime\x12\x1e\n" +
	"\n" +
	"timeOffset\x18\x14 \x01(\x03R\n" +
	"timeOffset\x12\x18\n" +
	"\aversion\x18\x15 \x01(\rR\aversion\x12\x16\n" +
	"\x06subVer\x18\x16 \x01(\tR\x06subVer\x12&\n" +
	"\x0estartingHeight\x18\x17 \x01(\x05R\x0estartingHeight\x12$\n" +
	"\rcurrentHeight\x18\x18 \x01(\x05R\rcurrentHeight\x12\x1a\n" +
	"\bbanscore\x18\x19 \x01(\x05R\bbanscore\x12 \n" +
	"\vwhitelisted\x18\x1a \x01(\bR\vwhitelisted\x12\x1c\n" +
	"\tfeeFilter\x18\x1b \x01(\x03R\tfeeFilter\"7\n" +
	"\x10GetPeersResponse\x12#\n" +
	"\x05peers\x18\x01 \x03(\v2\r.p2p_api.PeerR\x05peers\":\n" +
	"\x0eBanPeerRequest\x12\x12\n" +
	"\x04addr\x18\x01 \x01(\tR\x04addr\x12\x14\n" +
	"\x05until\x18\x02 \x01(\x03R\x05until\"!\n" +
	"\x0fBanPeerResponse\x12\x0e\n" +
	"\x02ok\x18\x01 \x01(\bR\x02ok\"&\n" +
	"\x10UnbanPeerRequest\x12\x12\n" +
	"\x04addr\x18\x01 \x01(\tR\x04addr\"#\n" +
	"\x11UnbanPeerResponse\x12\x0e\n" +
	"\x02ok\x18\x01 \x01(\bR\x02ok\"1\n" +
	"\x0fIsBannedRequest\x12\x1e\n" +
	"\n" +
	"ipOrSubnet\x18\x01 \x01(\tR\n" +
	"ipOrSubnet\".\n" +
	"\x10IsBannedResponse\x12\x1a\n" +
	"\bisBanned\x18\x01 \x01(\bR\bisBanned\",\n" +
	"\x12ListBannedResponse\x12\x16\n" +
	"\x06banned\x18\x01 \x03(\tR\x06banned\"%\n" +
	"\x13ClearBannedResponse\x12\x0e\n" +
	"\x02ok\x18\x01 \x01(\bR\x02ok\"E\n" +
	"\x12AddBanScoreRequest\x12\x17\n" +
	"\apeer_id\x18\x01 \x01(\tR\x06peerId\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\"%\n" +
	"\x13AddBanScoreResponse\x12\x0e\n" +
	"\x02ok\x18\x01 \x01(\bR\x02ok\"7\n" +
	"\x12ConnectPeerRequest\x12!\n" +
	"\fpeer_address\x18\x01 \x01(\tR\vpeerAddress\"E\n" +
	"\x13ConnectPeerResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"0\n" +
	"\x15DisconnectPeerRequest\x12\x17\n" +
	"\apeer_id\x18\x01 \x01(\tR\x06peerId\"H\n" +
	"\x16DisconnectPeerResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error2\x90\x05\n" +
	"\vPeerService\x12?\n" +
	"\bGetPeers\x12\x16.google.protobuf.Empty\x1a\x19.p2p_api.GetPeersResponse\"\x00\x12>\n" +
	"\aBanPeer\x12\x17.p2p_api.BanPeerRequest\x1a\x18.p2p_api.BanPeerResponse\"\x00\x12D\n" +
	"\tUnbanPeer\x12\x19.p2p_api.UnbanPeerRequest\x1a\x1a.p2p_api.UnbanPeerResponse\"\x00\x12A\n" +
	"\bIsBanned\x12\x18.p2p_api.IsBannedRequest\x1a\x19.p2p_api.IsBannedResponse\"\x00\x12C\n" +
	"\n" +
	"ListBanned\x12\x16.google.protobuf.Empty\x1a\x1b.p2p_api.ListBannedResponse\"\x00\x12E\n" +
	"\vClearBanned\x12\x16.google.protobuf.Empty\x1a\x1c.p2p_api.ClearBannedResponse\"\x00\x12J\n" +
	"\vAddBanScore\x12\x1b.p2p_api.AddBanScoreRequest\x1a\x1c.p2p_api.AddBanScoreResponse\"\x00\x12J\n" +
	"\vConnectPeer\x12\x1b.p2p_api.ConnectPeerRequest\x1a\x1c.p2p_api.ConnectPeerResponse\"\x00\x12S\n" +
	"\x0eDisconnectPeer\x12\x1e.p2p_api.DisconnectPeerRequest\x1a\x1f.p2p_api.DisconnectPeerResponse\"\x00B\fZ\n" +
	"./;p2p_apib\x06proto3"

var (
	file_services_p2p_p2p_api_p2p_api_proto_rawDescOnce sync.Once
	file_services_p2p_p2p_api_p2p_api_proto_rawDescData []byte
)

func file_services_p2p_p2p_api_p2p_api_proto_rawDescGZIP() []byte {
	file_services_p2p_p2p_api_p2p_api_proto_rawDescOnce.Do(func() {
		file_services_p2p_p2p_api_p2p_api_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_services_p2p_p2p_api_p2p_api_proto_rawDesc), len(file_services_p2p_p2p_api_p2p_api_proto_rawDesc)))
	})
	return file_services_p2p_p2p_api_p2p_api_proto_rawDescData
}

var file_services_p2p_p2p_api_p2p_api_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_services_p2p_p2p_api_p2p_api_proto_goTypes = []any{
	(*Peer)(nil),                   // 0: p2p_api.Peer
	(*GetPeersResponse)(nil),       // 1: p2p_api.GetPeersResponse
	(*BanPeerRequest)(nil),         // 2: p2p_api.BanPeerRequest
	(*BanPeerResponse)(nil),        // 3: p2p_api.BanPeerResponse
	(*UnbanPeerRequest)(nil),       // 4: p2p_api.UnbanPeerRequest
	(*UnbanPeerResponse)(nil),      // 5: p2p_api.UnbanPeerResponse
	(*IsBannedRequest)(nil),        // 6: p2p_api.IsBannedRequest
	(*IsBannedResponse)(nil),       // 7: p2p_api.IsBannedResponse
	(*ListBannedResponse)(nil),     // 8: p2p_api.ListBannedResponse
	(*ClearBannedResponse)(nil),    // 9: p2p_api.ClearBannedResponse
	(*AddBanScoreRequest)(nil),     // 10: p2p_api.AddBanScoreRequest
	(*AddBanScoreResponse)(nil),    // 11: p2p_api.AddBanScoreResponse
	(*ConnectPeerRequest)(nil),     // 12: p2p_api.ConnectPeerRequest
	(*ConnectPeerResponse)(nil),    // 13: p2p_api.ConnectPeerResponse
	(*DisconnectPeerRequest)(nil),  // 14: p2p_api.DisconnectPeerRequest
	(*DisconnectPeerResponse)(nil), // 15: p2p_api.DisconnectPeerResponse
	(*emptypb.Empty)(nil),          // 16: google.protobuf.Empty
}
var file_services_p2p_p2p_api_p2p_api_proto_depIdxs = []int32{
	0,  // 0: p2p_api.GetPeersResponse.peers:type_name -> p2p_api.Peer
	16, // 1: p2p_api.PeerService.GetPeers:input_type -> google.protobuf.Empty
	2,  // 2: p2p_api.PeerService.BanPeer:input_type -> p2p_api.BanPeerRequest
	4,  // 3: p2p_api.PeerService.UnbanPeer:input_type -> p2p_api.UnbanPeerRequest
	6,  // 4: p2p_api.PeerService.IsBanned:input_type -> p2p_api.IsBannedRequest
	16, // 5: p2p_api.PeerService.ListBanned:input_type -> google.protobuf.Empty
	16, // 6: p2p_api.PeerService.ClearBanned:input_type -> google.protobuf.Empty
	10, // 7: p2p_api.PeerService.AddBanScore:input_type -> p2p_api.AddBanScoreRequest
	12, // 8: p2p_api.PeerService.ConnectPeer:input_type -> p2p_api.ConnectPeerRequest
	14, // 9: p2p_api.PeerService.DisconnectPeer:input_type -> p2p_api.DisconnectPeerRequest
	1,  // 10: p2p_api.PeerService.GetPeers:output_type -> p2p_api.GetPeersResponse
	3,  // 11: p2p_api.PeerService.BanPeer:output_type -> p2p_api.BanPeerResponse
	5,  // 12: p2p_api.PeerService.UnbanPeer:output_type -> p2p_api.UnbanPeerResponse
	7,  // 13: p2p_api.PeerService.IsBanned:output_type -> p2p_api.IsBannedResponse
	8,  // 14: p2p_api.PeerService.ListBanned:output_type -> p2p_api.ListBannedResponse
	9,  // 15: p2p_api.PeerService.ClearBanned:output_type -> p2p_api.ClearBannedResponse
	11, // 16: p2p_api.PeerService.AddBanScore:output_type -> p2p_api.AddBanScoreResponse
	13, // 17: p2p_api.PeerService.ConnectPeer:output_type -> p2p_api.ConnectPeerResponse
	15, // 18: p2p_api.PeerService.DisconnectPeer:output_type -> p2p_api.DisconnectPeerResponse
	10, // [10:19] is the sub-list for method output_type
	1,  // [1:10] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_services_p2p_p2p_api_p2p_api_proto_init() }
func file_services_p2p_p2p_api_p2p_api_proto_init() {
	if File_services_p2p_p2p_api_p2p_api_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_services_p2p_p2p_api_p2p_api_proto_rawDesc), len(file_services_p2p_p2p_api_p2p_api_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_p2p_p2p_api_p2p_api_proto_goTypes,
		DependencyIndexes: file_services_p2p_p2p_api_p2p_api_proto_depIdxs,
		MessageInfos:      file_services_p2p_p2p_api_p2p_api_proto_msgTypes,
	}.Build()
	File_services_p2p_p2p_api_p2p_api_proto = out.File
	file_services_p2p_p2p_api_p2p_api_proto_goTypes = nil
	file_services_p2p_p2p_api_p2p_api_proto_depIdxs = nil
}
